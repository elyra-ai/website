"use strict";(self.webpackChunkelyra_ai_site=self.webpackChunkelyra_ai_site||[]).push([[2369],{6807:function(e,a,t){t.r(a),t.d(a,{Title:function(){return i},_frontmatter:function(){return s},default:function(){return p}});var l=t(3366),r=(t(7294),t(4983)),n=t(4295),o=["components"],i=function(){return(0,r.kt)("span",null,"Elyra release")},s={},u={Title:i,_frontmatter:s},c=n.Z;function p(e){var a=e.components,t=(0,l.Z)(e,o);return(0,r.kt)(c,Object.assign({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Before you begin"),(0,r.kt)("p",null,"Elyra depends on a few different packages that are under the control of the Elyra community and used\nmostly to abstract integration with other runtimes and components."),(0,r.kt)("p",null,"Currently, these packages are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/elyra-ai/pipeline-editor"},"pipeline-editor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/elyra-ai/canvas"},"canvas"))),(0,r.kt)("p",null,"Before you begin creating a new Elyra release, verify if there is a need to release any of these packages, and if\nnecessary, update Elyra to use the new release."),(0,r.kt)("h2",null,"Elyra release process overview"),(0,r.kt)("p",null,"Building an Elyra release consists of the following steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Updating the ",(0,r.kt)("a",{parentName:"li",href:"../getting_started/changelog.md"},"changelog.md")," with the list of changes added to the release"),(0,r.kt)("li",{parentName:"ul"},"Building the Elyra python package."),(0,r.kt)("li",{parentName:"ul"},"Building Elyra JupyterLab extensions as npm packages."),(0,r.kt)("li",{parentName:"ul"},"Generate and build the modified packages to enable single-extension deployment."),(0,r.kt)("li",{parentName:"ul"},"Build and publish multiple docker images")),(0,r.kt)("p",null,"Most of the steps required to prepare and publish a release have been automated through the ",(0,r.kt)("inlineCode",{parentName:"p"},"create-release.sh")," script,\nwhich exposes three goals:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"prepare-changelog")," goal traverse the recent commits to update the changelog.md for a given release.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create release prepare-changelog --version 2.3.0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"prepare")," goal create the release artifacts and make them available locally for validation.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create release prepare --version 2.3.0 --dev-version 2.4.0\n")),(0,r.kt)("p",null,"— The ‘publish’ goal get a previous prepared release and publish the artifacts to respective repositories."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create release publish --version 2.3.0\n")),(0,r.kt)("h3",null,"Creating minor/patch releases from branches"),(0,r.kt)("p",null,"In the case of creating minor/patch releases from a branch, one will need to modify the release script so that it\nperform a checkout of the ",(0,r.kt)("inlineCode",{parentName:"p"},"given branch")," after cloning the Elyra repository:"),(0,r.kt)("p",null,"Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkout_code")," function in the create-release script and add the following at the end of that function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"check_run(['git', 'checkout', '<BRANCH NAME>'], cwd=config.source_dir)\ncheck_run(['git', 'status'], cwd=config.source_dir)\n")),(0,r.kt)("h2",null,"Preparing Elyra release"),(0,r.kt)("h3",null,"Generate the release changelog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create release prepare-changelog --version 2.3.0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The updated changelog will then be available at ",(0,r.kt)("inlineCode",{parentName:"li"},"./build/release/elyra")," as a git commit",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The release manager should make any necessary adjustments and/or updates before ‘pushing the changelog commit’. "),(0,r.kt)("li",{parentName:"ul"},"Note that the release manage could also push the change log as a new pull request to gather inputs from the community.")))),(0,r.kt)("h2",null,"Prepare the release artifacts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create-release.py prepare --version 2.0.0 --dev-version 2.1.0 [--rc 0][--beta 0]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The artifacts for the new release will then be available at ",(0,r.kt)("inlineCode",{parentName:"li"},"./build/release/"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Elyra folder is the main release"),(0,r.kt)("li",{parentName:"ul"},"The other folders, are the individual extensions packaged as standalone packages")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"elyra\nelyra-code-snippet-extension\nelyra-pipeline-editor-extension\nelyra-python-editor-extension\nelyra-r-editor-extension\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Test the release",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Run multiple scenarios, to make sure each extension is working ok"),(0,r.kt)("li",{parentName:"ul"},"Run the covid-notebook scenario"),(0,r.kt)("li",{parentName:"ul"},"Run the NOAA sample")))),(0,r.kt)("h3",null,"Publish the release"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"create-release.py publish --version 2.0.0 [--rc 0] [--beta 0]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build and publish container images based on release tag")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git pull --rebase\ngit checkout tags/v2.0.0\nmake container-images publish-container-images\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update dev and latest image tags based on release tag")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker tag elyra/elyra:2.0.0 elyra/elyra:dev && docker push elyra/elyra:dev\ndocker tag elyra/elyra:2.0.0 elyra/elyra:latest && docker push elyra/elyra:latest\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:dev && docker push quay.io/elyra/elyra:dev\ndocker tag quay.io/elyra/elyra:2.0.0 quay.io/elyra/elyra:latest && docker push quay.io/elyra/elyra:latest\n\ndocker tag elyra/airflow:2.0.0 elyra/airflow:dev && docker push elyra/airflow:dev\ndocker tag elyra/airflow:2.0.0 elyra/airflow:latest && docker push elyra/airflow:latest\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:dev && docker push quay.io/elyra/airflow:dev\ndocker tag quay.io/elyra/airflow:2.0.0 quay.io/elyra/airflow:latest && docker push quay.io/elyra/airflow:latest\n\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:dev && docker push elyra/kf-notebook:dev\ndocker tag elyra/kf-notebook:2.0.0 elyra/kf-notebook:latest && docker push elyra/kf-notebook:latest\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:dev && docker push quay.io/elyra/kf-notebook:dev\ndocker tag quay.io/elyra/kf-notebook:2.0.0 quay.io/elyra/kf-notebook:latest && docker push quay.io/elyra/kf-notebook:latest\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Merge changes for conda-forge",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-feedstock/pulls"},"https://github.com/conda-forge/elyra-feedstock/pulls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-server-feedstock/pulls"},"https://github.com/conda-forge/elyra-server-feedstock/pulls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-code-snippet-extension-feedstock/pulls"},"https://github.com/conda-forge/elyra-code-snippet-extension-feedstock/pulls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-pipeline-editor-extension-feedstock/pulls"},"https://github.com/conda-forge/elyra-pipeline-editor-extension-feedstock/pulls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-python-editor-extension-feedstock/pulls"},"https://github.com/conda-forge/elyra-python-editor-extension-feedstock/pulls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/conda-forge/elyra-r-editor-extension-feedstock/pulls"},"https://github.com/conda-forge/elyra-r-editor-extension-feedstock/pulls"))))))}p.isMDXComponent=!0},4295:function(e,a,t){t.d(a,{Z:function(){return v}});var l=t(7294),r=t(8650),n=t.n(r),o=t(5444),i=t(9403),s=t(5611),u=t(5900),c=t.n(u),p=function(e){var a,t=e.title,r=e.theme,n=e.tabs,o=void 0===n?[]:n;return l.createElement("div",{className:c()("PageHeader-module--page-header--NqfPe",(a={},a["PageHeader-module--with-tabs--vbQ-W"]=o.length,a["PageHeader-module--dark-mode--WCeH8"]="dark"===r,a))},l.createElement("div",{className:"bx--grid"},l.createElement("div",{className:"bx--row"},l.createElement("div",{className:"bx--col-lg-12"},l.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},t)))))},d=function(e){var a=e.relativePagePath,t=e.repository,r=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,n=t||r,i=n.baseUrl,s=n.subDirectory,u=i+"/edit/"+n.branch+s+"/src/pages"+a;return i?l.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},l.createElement("div",{className:"bx--col"},l.createElement("a",{className:"EditLink-module--link--IDrl1",href:u},"Edit this page on GitHub"))):null},m=t(4275),h=t(1721),k=function(e){function a(){return e.apply(this,arguments)||this}return(0,h.Z)(a,e),a.prototype.render=function(){var e=this.props,a=e.title,t=e.tabs,r=e.slug,i=r.split("/").filter(Boolean).slice(-1)[0],s=t.map((function(e){var a,t=n()(e,{lower:!0,strict:!0}),s=t===i,u=new RegExp(i+"/?(#.*)?$"),p=r.replace(u,t);return l.createElement("li",{key:e,className:c()((a={},a["PageTabs-module--selected-item--aBB0K"]=s,a),"PageTabs-module--list-item--024o6")},l.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+p},e))}));return l.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},l.createElement("div",{className:"bx--grid"},l.createElement("div",{className:"bx--row"},l.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},l.createElement("nav",{"aria-label":a},l.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},a}(l.Component),g=k,y=t(2881),f=t(6958),b=t(36),N=function(e){var a=e.date,t=new Date(a);return a?l.createElement(b.X2,{className:"last-modified-date-module--row--XJoYQ"},l.createElement(b.sg,null,l.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",t.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},v=function(e){var a=e.pageContext,t=e.children,r=e.location,u=e.Title,c=a.frontmatter,h=void 0===c?{}:c,k=a.relativePagePath,b=a.titleType,v=h.tabs,E=h.title,w=h.theme,x=h.description,T=h.keywords,q=h.date,P=(0,f.Z)().interiorTheme,C=(0,o.useStaticQuery)("2456312558").site.pathPrefix,B=C?r.pathname.replace(C,""):r.pathname,_=v?B.split("/").filter(Boolean).slice(-1)[0]||n()(v[0],{lower:!0}):"",Z=w||P;return l.createElement(s.Z,{tabs:v,homepage:!1,theme:Z,pageTitle:E,pageDescription:x,pageKeywords:T,titleType:b},l.createElement(p,{title:u?l.createElement(u,null):E,label:"label",tabs:v,theme:Z}),v&&l.createElement(g,{title:E,slug:B,tabs:v,currentTab:_}),l.createElement(y.Z,{padded:!0},t,l.createElement(d,{relativePagePath:k}),l.createElement(N,{date:q})),l.createElement(m.Z,{pageContext:a,location:r,slug:B,tabs:v,currentTab:_}),l.createElement(i.Z,null))}}}]);
//# sourceMappingURL=component---src-pages-dev-guide-elyra-release-mdx-3b32c71ab53cd7fec4a4.js.map