{
    "componentChunkName": "component---src-pages-how-do-i-contribute-mdx",
    "path": "/how-do-i-contribute/",
    "result": {"pageContext":{"frontmatter":{"title":"How do I contribute?"},"relativePagePath":"/how-do-i-contribute.mdx","titleType":"page","MdxNode":{"id":"152cc2a1-d579-52d9-b269-c9e4a4aeea3c","children":[],"parent":"7d7eba36-747d-5045-b795-7e4279890693","internal":{"content":"---\ntitle: How do I contribute?\n---\n\n<PageDescription>\n\nThis guide documents the best way to make various types of contribution to the Elyra projects,\nincluding what is required before submitting a documentation or code change and how to properly merge them.\n\n  </PageDescription>\n\n\n<InlineNotification>\nContributing to the Elyra project doesn't just mean writing code. Helping testing and reviewing pull requests\nand improving documentation are also welcome. In fact, proposing significant code changes usually requires first\ngaining experience and credibility within the community by helping in other ways. This is also a guide to \nbecoming an effective contributor.\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Code of conduct</AnchorLink>\n  <AnchorLink>Contributing documentation changes</AnchorLink>\n  <AnchorLink>Contributing code changes</AnchorLink>\n  <AnchorLink>Suggested issues</AnchorLink>\n  <AnchorLink>Talking to the contributors</AnchorLink>\n</AnchorLinks>\n\n## Code of conduct\n\n\n\nAs contributors and maintainers of this project, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\n<AnchorLinks small>\n  <AnchorLink>Our standards</AnchorLink>\n  <AnchorLink>Enforcement responsibilities</AnchorLink>\n  <AnchorLink>Scope</AnchorLink>\n  <AnchorLink>Enforcement</AnchorLink>\n  <AnchorLink>Attrition</AnchorLink>\n</AnchorLinks>\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse,\ninclusive, and healthy community.\n\n\n  ### Our standards\n\n    Examples of behavior that contributes to a positive environment for our community include:\n\n      * Demonstrating empathy and kindness toward other people\n      * Being respectful of differing opinions, viewpoints, and experiences\n      * Giving and gracefully accepting constructive feedback\n      * Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n      * Focusing on what is best not just for us as individuals, but for the overall community\n\n      Examples of unacceptable behavior include:\n\n      * The use of sexualized language or imagery, and sexual attention or\n        advances of any kind\n      * Trolling, insulting or derogatory comments, and personal or political attacks\n      * Public or private harassment\n      * Publishing others' private information, such as a physical or email\n        address, without their explicit permission\n      * Other conduct which could reasonably be considered inappropriate in a\n        professional setting\n  \n  ### Enforcement responsibilities\n\n    Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior\nand will take appropriate and fair corrective action in response to any behavior that they deem\ninappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits,\ncode, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct,\nand will communicate reasons for moderation decisions when appropriate.\n\n\n### Scope\n\nThis Code of Conduct applies within all community spaces including Gitter, issue trackers, wikis,\nblogs, Twitter, and any other communication channels used by our community, and also applies when\nan individual is officially representing the community in public spaces. Examples of representing\nour community include using an official e-mail address, posting via an official social media account,\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community\nleaders responsible for enforcement via e-mail to the Elyra Project Management Committee at\nelyra-pmc AT googlegroups DOT com. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n  \n  ### Attrition\n  \n  This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/),\nversion 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\n## Contributing documentation changes\n\nTo create or modify the project documentation, edit the Markdown source files which is usually located at\n$project/docs directory, whose README file shows how to build the documentation locally to test your changes.\n\nThe process to propose a doc change is otherwise the same as the process for proposing code changes below.\n\n## Contributing code changes\n\nPlease review the preceding section before proposing a code change. This section documents how to do so.\n\n<AnchorLinks small>\n  <AnchorLink>Before creating a Pull Request</AnchorLink>\n  <AnchorLink>Creating a Pull Request</AnchorLink>\n  <AnchorLink>The Review Process</AnchorLink>\n  <AnchorLink>Merging Pull Requests</AnchorLink>\n</AnchorLinks>\n\nWhen you contribute code, you affirm that the contribution is your original work and that you license the\nwork to the project under the project's open source license.\n\nWhether or not you state this explicitly, by submitting any copyrighted material via pull request, email,\nor other means you agree to license the material under the project's open source license and warrant that you\nhave the legal authority to do so.\n\n\n\n### Before creating a Pull Request\n\n1.Make sure you have the most up to date code\n\nIf you haven't done so, please set upstream as described in [GitHub Documentation](https://help.github.com/articles/configuring-a-remote-for-a-fork/)\n\nMake sure you do not have any uncommitted changes and rebase main with latest changes from upstream:\n\n```\ngit fetch upstream\ngit checkout main\ngit rebase upstream/main\n```\n\nNow you should rebase your branch with main, to receive the upstream changes\n\n```\ngit checkout branch\ngit rebase main\n```\n\nIn both cases, you can have conflicts:\n\n```\nerror: could not apply fa39187... something to add to patch A\n\nWhen you have resolved this problem, run \"git rebase --continue\".\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\nCould not apply fa39187f3c3dfd2ab5faa38ac01cf3de7ce2e841... Change fake file\n```\n\nHere, Git is telling you which commit is causing the conflict (fa39187). You're given three choices:\n\n* You can run `git rebase --abort` to completely undo the rebase. Git will return you to your branch's\nstate as it was before git rebase was called.\n* You can run `git rebase --skip` to completely skip the commit. That means that none of the changes\nintroduced by the problematic commit will be included. It is very rare that you would choose this option.\n* You can fix the conflict.\n\nTo fix the conflict, you can follow [the standard procedures for resolving merge conflicts from the command line](https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line). \nWhen you're finished, you'll need to call `git rebase --continue` in order for Git to continue processing\nthe rest of the rebase.\n\n<InlineNotification>\n\n**Note:** If there are any merge conflicts with the `yarn.lock` file, there is no need to manually resolve them. Simply run `yarn install` and yarn will do its\nbest to automatically resolve any conflicts.\n\n</InlineNotification>\n\n\n### Creating a Pull Request\n\n1. Fork the Github repository at https://github.com/elyra-ai/xxx if you haven't already\n1. Clone your fork, create a new branch, push commits to the branch.\n1. Consider whether documentation or tests need to be added or updated as part of the change, and add them as needed.\n1. Open a pull request against the main branch of elyra-ai/elyra. (Only in special cases would the PR be opened\n   against other branches.)\n  1. The PR title should describe the proposed change in the PR itself.\n  1. If the pull request is still a work in progress, and so is not ready to be merged, but needs to be pushed \n     to Github to facilitate review, then prefix the PR title with `[WIP]`.\n  1. Follow [The 7 rules for a great commit message](http://chris.beams.io/posts/git-commit/)\n     * Separate subject from body with a blank line\n     * Limit the subject line to 50 characters\n     * Capitalize the subject line\n     * Do not end the subject line with a period\n     * Use the imperative mood in the subject line\n     * Wrap the body at 72 characters\n     * Use the body to explain what and why vs. how\n\n### The Review Process\n\n\nThe review process can help the project achieve a high-quality code base. When performing code reviews,\nvarious aspects should be considered, and the following\n[code review checklist](https://www.michaelagreiler.com/wp-content/uploads/2019/08/Code_Review_Checklist_Greiler.pdf)\ngive some examples of such items.\n\nWhat to expect from the review process?\n\n* Other reviewers, including committers, may comment on the changes and suggest modifications. Changes can be added\n  by simply pushing more commits to the same branch.\n* Lively, polite, rapid technical debate is encouraged from everyone in the community. The outcome may be a\n  rejection of the entire change.\n* Reviewers can indicate that a change looks suitable for merging with a comment such as: \n  \"I think this patch looks good\". Elyra uses the LGTM convention for indicating the strongest level of \n  technical sign-off on a patch: simply comment with the word \"LGTM\". It specifically means: \n  \"I've looked at this thoroughly and take as much ownership as if I wrote the patch myself\". If you comment LGTM \n  you will be expected to help with bugs or follow-up issues on the patch. Consistent, judicious use of LGTMs\n  is a great way to gain credibility as a reviewer with the broader community.\n* Sometimes, other changes will be merged which conflict with your pull request's changes. The PR can't be merged\n  until the conflict is resolved. This can be resolved with \"git fetch origin\" followed by \"git merge origin/main\"\n  and resolving the conflicts by hand, then pushing the result to your branch.\n* Try to be responsive to the discussion rather than let days pass between replies\n\n### Merging Pull Requests\n\nTo avoid a convoluted main branch history, with lots of \"merge xxx\" on the commit history, we are not using the\nGitHub `merge pull request` UI option and recommending either `squash and merge` or `rebase and merge` options. \n\n\n## Suggested Issues\n\n- Issues tagged as Good first issue: https://github.com/elyra-ai/elyra/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+issue%22\n- Issues tagged as Help wanted: https://github.com/elyra-ai/elyra/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22\n\n\n## Talking to the contributors\n\n-  Find us on gitter: https://gitter.im/elyra-ai/community\n- Come to our weekly dev meeting on Thursdays: https://elyra.readthedocs.io/en/latest/getting_started/getting-help.html#join-the-weekly-community-meeting\n","type":"Mdx","contentDigest":"e17c81c33828f851e8f8b136e60dc3cc","owner":"gatsby-plugin-mdx","counter":290},"frontmatter":{"title":"How do I contribute?"},"exports":{},"rawBody":"---\ntitle: How do I contribute?\n---\n\n<PageDescription>\n\nThis guide documents the best way to make various types of contribution to the Elyra projects,\nincluding what is required before submitting a documentation or code change and how to properly merge them.\n\n  </PageDescription>\n\n\n<InlineNotification>\nContributing to the Elyra project doesn't just mean writing code. Helping testing and reviewing pull requests\nand improving documentation are also welcome. In fact, proposing significant code changes usually requires first\ngaining experience and credibility within the community by helping in other ways. This is also a guide to \nbecoming an effective contributor.\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Code of conduct</AnchorLink>\n  <AnchorLink>Contributing documentation changes</AnchorLink>\n  <AnchorLink>Contributing code changes</AnchorLink>\n  <AnchorLink>Suggested issues</AnchorLink>\n  <AnchorLink>Talking to the contributors</AnchorLink>\n</AnchorLinks>\n\n## Code of conduct\n\n\n\nAs contributors and maintainers of this project, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\n<AnchorLinks small>\n  <AnchorLink>Our standards</AnchorLink>\n  <AnchorLink>Enforcement responsibilities</AnchorLink>\n  <AnchorLink>Scope</AnchorLink>\n  <AnchorLink>Enforcement</AnchorLink>\n  <AnchorLink>Attrition</AnchorLink>\n</AnchorLinks>\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse,\ninclusive, and healthy community.\n\n\n  ### Our standards\n\n    Examples of behavior that contributes to a positive environment for our community include:\n\n      * Demonstrating empathy and kindness toward other people\n      * Being respectful of differing opinions, viewpoints, and experiences\n      * Giving and gracefully accepting constructive feedback\n      * Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n      * Focusing on what is best not just for us as individuals, but for the overall community\n\n      Examples of unacceptable behavior include:\n\n      * The use of sexualized language or imagery, and sexual attention or\n        advances of any kind\n      * Trolling, insulting or derogatory comments, and personal or political attacks\n      * Public or private harassment\n      * Publishing others' private information, such as a physical or email\n        address, without their explicit permission\n      * Other conduct which could reasonably be considered inappropriate in a\n        professional setting\n  \n  ### Enforcement responsibilities\n\n    Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior\nand will take appropriate and fair corrective action in response to any behavior that they deem\ninappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits,\ncode, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct,\nand will communicate reasons for moderation decisions when appropriate.\n\n\n### Scope\n\nThis Code of Conduct applies within all community spaces including Gitter, issue trackers, wikis,\nblogs, Twitter, and any other communication channels used by our community, and also applies when\nan individual is officially representing the community in public spaces. Examples of representing\nour community include using an official e-mail address, posting via an official social media account,\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community\nleaders responsible for enforcement via e-mail to the Elyra Project Management Committee at\nelyra-pmc AT googlegroups DOT com. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n  \n  ### Attrition\n  \n  This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/),\nversion 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\n## Contributing documentation changes\n\nTo create or modify the project documentation, edit the Markdown source files which is usually located at\n$project/docs directory, whose README file shows how to build the documentation locally to test your changes.\n\nThe process to propose a doc change is otherwise the same as the process for proposing code changes below.\n\n## Contributing code changes\n\nPlease review the preceding section before proposing a code change. This section documents how to do so.\n\n<AnchorLinks small>\n  <AnchorLink>Before creating a Pull Request</AnchorLink>\n  <AnchorLink>Creating a Pull Request</AnchorLink>\n  <AnchorLink>The Review Process</AnchorLink>\n  <AnchorLink>Merging Pull Requests</AnchorLink>\n</AnchorLinks>\n\nWhen you contribute code, you affirm that the contribution is your original work and that you license the\nwork to the project under the project's open source license.\n\nWhether or not you state this explicitly, by submitting any copyrighted material via pull request, email,\nor other means you agree to license the material under the project's open source license and warrant that you\nhave the legal authority to do so.\n\n\n\n### Before creating a Pull Request\n\n1.Make sure you have the most up to date code\n\nIf you haven't done so, please set upstream as described in [GitHub Documentation](https://help.github.com/articles/configuring-a-remote-for-a-fork/)\n\nMake sure you do not have any uncommitted changes and rebase main with latest changes from upstream:\n\n```\ngit fetch upstream\ngit checkout main\ngit rebase upstream/main\n```\n\nNow you should rebase your branch with main, to receive the upstream changes\n\n```\ngit checkout branch\ngit rebase main\n```\n\nIn both cases, you can have conflicts:\n\n```\nerror: could not apply fa39187... something to add to patch A\n\nWhen you have resolved this problem, run \"git rebase --continue\".\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\nCould not apply fa39187f3c3dfd2ab5faa38ac01cf3de7ce2e841... Change fake file\n```\n\nHere, Git is telling you which commit is causing the conflict (fa39187). You're given three choices:\n\n* You can run `git rebase --abort` to completely undo the rebase. Git will return you to your branch's\nstate as it was before git rebase was called.\n* You can run `git rebase --skip` to completely skip the commit. That means that none of the changes\nintroduced by the problematic commit will be included. It is very rare that you would choose this option.\n* You can fix the conflict.\n\nTo fix the conflict, you can follow [the standard procedures for resolving merge conflicts from the command line](https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line). \nWhen you're finished, you'll need to call `git rebase --continue` in order for Git to continue processing\nthe rest of the rebase.\n\n<InlineNotification>\n\n**Note:** If there are any merge conflicts with the `yarn.lock` file, there is no need to manually resolve them. Simply run `yarn install` and yarn will do its\nbest to automatically resolve any conflicts.\n\n</InlineNotification>\n\n\n### Creating a Pull Request\n\n1. Fork the Github repository at https://github.com/elyra-ai/xxx if you haven't already\n1. Clone your fork, create a new branch, push commits to the branch.\n1. Consider whether documentation or tests need to be added or updated as part of the change, and add them as needed.\n1. Open a pull request against the main branch of elyra-ai/elyra. (Only in special cases would the PR be opened\n   against other branches.)\n  1. The PR title should describe the proposed change in the PR itself.\n  1. If the pull request is still a work in progress, and so is not ready to be merged, but needs to be pushed \n     to Github to facilitate review, then prefix the PR title with `[WIP]`.\n  1. Follow [The 7 rules for a great commit message](http://chris.beams.io/posts/git-commit/)\n     * Separate subject from body with a blank line\n     * Limit the subject line to 50 characters\n     * Capitalize the subject line\n     * Do not end the subject line with a period\n     * Use the imperative mood in the subject line\n     * Wrap the body at 72 characters\n     * Use the body to explain what and why vs. how\n\n### The Review Process\n\n\nThe review process can help the project achieve a high-quality code base. When performing code reviews,\nvarious aspects should be considered, and the following\n[code review checklist](https://www.michaelagreiler.com/wp-content/uploads/2019/08/Code_Review_Checklist_Greiler.pdf)\ngive some examples of such items.\n\nWhat to expect from the review process?\n\n* Other reviewers, including committers, may comment on the changes and suggest modifications. Changes can be added\n  by simply pushing more commits to the same branch.\n* Lively, polite, rapid technical debate is encouraged from everyone in the community. The outcome may be a\n  rejection of the entire change.\n* Reviewers can indicate that a change looks suitable for merging with a comment such as: \n  \"I think this patch looks good\". Elyra uses the LGTM convention for indicating the strongest level of \n  technical sign-off on a patch: simply comment with the word \"LGTM\". It specifically means: \n  \"I've looked at this thoroughly and take as much ownership as if I wrote the patch myself\". If you comment LGTM \n  you will be expected to help with bugs or follow-up issues on the patch. Consistent, judicious use of LGTMs\n  is a great way to gain credibility as a reviewer with the broader community.\n* Sometimes, other changes will be merged which conflict with your pull request's changes. The PR can't be merged\n  until the conflict is resolved. This can be resolved with \"git fetch origin\" followed by \"git merge origin/main\"\n  and resolving the conflicts by hand, then pushing the result to your branch.\n* Try to be responsive to the discussion rather than let days pass between replies\n\n### Merging Pull Requests\n\nTo avoid a convoluted main branch history, with lots of \"merge xxx\" on the commit history, we are not using the\nGitHub `merge pull request` UI option and recommending either `squash and merge` or `rebase and merge` options. \n\n\n## Suggested Issues\n\n- Issues tagged as Good first issue: https://github.com/elyra-ai/elyra/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+issue%22\n- Issues tagged as Help wanted: https://github.com/elyra-ai/elyra/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22\n\n\n## Talking to the contributors\n\n-  Find us on gitter: https://gitter.im/elyra-ai/community\n- Come to our weekly dev meeting on Thursdays: https://elyra.readthedocs.io/en/latest/getting_started/getting-help.html#join-the-weekly-community-meeting\n","fileAbsolutePath":"/Users/akchin/github/website/src/pages/how-do-i-contribute.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}