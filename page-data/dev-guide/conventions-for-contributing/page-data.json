{
    "componentChunkName": "component---src-pages-dev-guide-conventions-for-contributing-mdx",
    "path": "/dev-guide/conventions-for-contributing/",
    "result": {"pageContext":{"frontmatter":{"title":"Conventions for contributing to Elyra Extensions","description":"Conventions for contributing to Elyra Extensions"},"relativePagePath":"/dev-guide/conventions-for-contributing.mdx","titleType":"page","MdxNode":{"id":"48d8602d-d6b7-5f43-bc97-c728fe208fa7","children":[],"parent":"73eaccba-bba3-5748-89c6-2e2d58cde349","internal":{"content":"---\ntitle: Conventions for contributing to Elyra Extensions\ndescription: Conventions for contributing to Elyra Extensions\n---\n\nexport const Title = () => (\n  <span>\n    Conventions for contributing to Elyra Extensions\n  </span>\n);\n\n## File Naming and File Creation\n Elyra extensions use a separate file for each widget, and keep helper functions and classes in the file with that widget. A file containing a widget is named after the widget (i.e. `PipelineEditorWidget.tsx` contains the class `PipelineEditorWidget`).\n\nFiles containing util functions are named generically after the utils functionality (i.e. if a util function returned a custom dialog, the file that contained that function would be called `dialog.tsx`).\n\nThe index file contains only the definition of the extension class and any other exports that the extension creates.\n## Import sections\nElyra extensions create separate sections for imports from different categories (i.e. all imports from `@jupyterlab` would be in a separate section from imports from `@lumino`). Sections are separated by a blank line. Each section is alphabetized by the name of packages.","type":"Mdx","contentDigest":"0a6d49395375fc59296309b4d5977ce3","owner":"gatsby-plugin-mdx","counter":334},"frontmatter":{"title":"Conventions for contributing to Elyra Extensions","description":"Conventions for contributing to Elyra Extensions"},"exports":{},"rawBody":"---\ntitle: Conventions for contributing to Elyra Extensions\ndescription: Conventions for contributing to Elyra Extensions\n---\n\nexport const Title = () => (\n  <span>\n    Conventions for contributing to Elyra Extensions\n  </span>\n);\n\n## File Naming and File Creation\n Elyra extensions use a separate file for each widget, and keep helper functions and classes in the file with that widget. A file containing a widget is named after the widget (i.e. `PipelineEditorWidget.tsx` contains the class `PipelineEditorWidget`).\n\nFiles containing util functions are named generically after the utils functionality (i.e. if a util function returned a custom dialog, the file that contained that function would be called `dialog.tsx`).\n\nThe index file contains only the definition of the extension class and any other exports that the extension creates.\n## Import sections\nElyra extensions create separate sections for imports from different categories (i.e. all imports from `@jupyterlab` would be in a separate section from imports from `@lumino`). Sections are separated by a blank line. Each section is alphabetized by the name of packages.","fileAbsolutePath":"/Users/akchin/github/website/src/pages/dev-guide/conventions-for-contributing.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}